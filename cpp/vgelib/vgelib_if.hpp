// Autogenerated file - do not edit!

namespace vge {

    /*
    GO/C++ interface structure. These structure must match one(s) declared in vk/handles.go
    */

    struct ImageDescription {
        uint32_t Width;
        uint32_t Height;
        uint32_t Depth;
        vk::Format Format;
        uint32_t Layers;
        uint32_t MipLevels;
    };

    struct ImageRange {
        uint32_t FirstLayer;
        uint32_t LayerCount;
        uint32_t FirstMipLevel;
        uint32_t LevelCount;
        uint32_t Layout;
        vk::ImageLayout get_layout() {
            return vk::ImageLayout(Layout);
        }
    };

    struct DescriptorInfo {
        DescriptorSet* set;
        uint32_t hasOffset;
        uint32_t offset;
    };

    struct DrawItem {
        Pipeline* pipeline;
        Buffer* inputs[8];
        DescriptorInfo descriptors[8];
        uint32_t from;
        uint32_t count;
        uint32_t instances;
        uint32_t fromInstance;
        uint32_t indexed;
        uint32_t pushlen;
        size_t pushOffset;
    };

    struct AttachmentInfo {
        uint32_t initialLayout;
        uint32_t finalLayout;
        uint32_t format;
        float clearColor[4];
    };

    enum EventType : uint32_t {
        Nil = 0,
        Quit = 100,
        CloseWindow = 101,
        // CreateWindow = 102,
        ResizeWindow = 103,
        KeyUp = 200,
        KeyDown = 201,
        Char = 202,
        MouseUp = 300,
        MouseDown = 301,
        MouseMove = 302,
        MouseScroll = 303,
    };

    // Raw event from desktop
    struct RawEvent {
        EventType eventType;
        int32_t arg1, arg2, arg3;
        Window* win;
    };

    struct DeviceInfo {
        uint32_t valid;
        uint32_t deviceKind;
        size_t memorySize;
        uint32_t maxSamplersPerStage;
        uint32_t maxImageArrayLayers;
        uint32_t nameLen;
        uint32_t reasonLen;
        char name[256];
        char reason[256];
    };

    enum WindowState : uint32_t {
        Normal = 0,
        Hidden = 1,
        Minimized = 2,
        Maximized = 3,
        Iconic = 4,
        Modes = 15,     // Flag for modes
        Fixed = 16,     // No resize
        Borderless = 32, // No borders, title etc.
    };

    struct WindowPos {
        int32_t left;
        int32_t top;
        int32_t width;
        int32_t height;
        WindowState state;
        uint32_t monitor;
    };
   

}
